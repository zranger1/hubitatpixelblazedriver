{
  "name": "Multisegment V1",
  "id": "tWpLYZTj3BJPRn8ER",
  "sources": {
    "main": "//////////////////////\n// Divide a lightstrip into zones, each\n// with independent RGB settings, coded for easy JSON access\n// so we can sync the zone colors to external devices or events\n// 07/10/2020 - JEM\n\n// per-zone color/pattern control constants and data array declaration\nexport var __n_zones = 4;\n\n// constant indices for zone control array\nvar __zone_state = 0;  // on/off state\nvar __zone_h = 1;      // hue (0-1 fixed point)\nvar __zone_s = 2;      // saturation (0-1 fixed point)\nvar __zone_b = 3;      // brightness (0-1 fixed point)\nvar __zone_effect = 4; // per zone lighting effect.  Not yet implemented\nvar __zone_size = 5;   // length of zone in pixels\n\nvar __zone_cols = 6;\n\n// per zone data array. To reduce the amount of json data shipped\n// around the network, this is hard coded for now, with one array per zone\nvar __n_zones = 4;\nexport var z_0 = array(__zone_cols);\nexport var z_1 = array(__zone_cols);\nexport var z_2 = array(__zone_cols);\nexport var z_3 = array(__zone_cols);\n\nvar __zArray = array(__n_zones);\nvar __zZoneStart = array (__n_zones);\n\n// Load data structures before we start rendering\nInitializeZoneData();\n\n// Set size of zone, in pixels.  Zero is the minimum size,\n// pixelCount the maximum.  If you change the size of a zone,\n// the zones that follow it will have their sizes adjusted \n// as well. By definition, the first zone always starts at the\n// first pixel, and the last zone ends at the last pixel.\nfunction SetZoneSize(z,nPixels) {\n  var i;\n  var usedPixels = 0;\n  \n  for (i = 0; i < __n_zones; i++) {\n    var a = __zArray[i];\n    if (i == z) { \n      a[__zone_size] = nPixels;\n    }\n    else {\n      a[__zone_size] = clamp(a[__zone_size], 0, pixelCount - usedPixels);\n    }  \n    usedPixels += a[__zone_size];\n  }\t  \n}\n\n// Set hsb color of the specified zone\nfunction SetZoneHSB(z,h,s,b) {\n\tvar a = __zArray[z];\n\ta[__zone_h] = h;      // hue\n\ta[__zone_s] = s;      // saturation\n\ta[__zone_b] = b;      // brightness\n}\t\n\n// set on/off state of specified zone\nfunction SetZoneState(z, state) {\n\tvar a = __zArray[z];\n    a[__zone_state] = state;\n}\n\n// set special effect for zone\n// TBD - not yet implemented\nfunction SetZoneEffect(z, effect) {\n\t    var a = __zArray[z];\t\n\t\ta[__zone_effect] = effect;\n}\n\nfunction InitializeZoneData() {\t\n  var i;\n  \n// set up lookup table of individual\n// zone status arrays  \n    __zArray[0] = z_0;\n\t  __zArray[1] = z_1;\n    __zArray[2] = z_2;\n    __zArray[3] = z_3;\t\n\n// start with all zones on, equal in size, and set to random hues.\n//\n// IMPORTANT NOTE:\n// To customize your starting zone sizes and colors, you can \n// move the zone setup function calls (like SetZoneSize and SetZoneHSB)\n// from this loop and call them per zone with the setup you want.\n   var i;\n   for (i = 0; i < __n_zones; i++) {\n      SetZoneState(i,true);     \n\t    SetZoneEffect(i,0)\n      SetZoneHSB(i,random(1),1,0.60)\n      SetZoneSize(i,floor(pixelCount / __n_zones));\n   }\n// add custom calls to zone setup functions here!\n   \n} \n\n// determine the starting pixel index for each zone\nfunction CalcZoneStart() {\n  var i;\n  var start = 0;\n  \n  for (i = 0; i < __n_zones; i++) {\n    var a = __zArray[i];   \n    __zZoneStart[i] = start;\n    start += a[__zone_size];\n  }\t   \n    \n}\n\n// given a pixel index, return the number of the zone it is in\nfunction GetZoneNumber(pix) {\n  var i;\n  \n  for (i = __n_zones - 1; i >= 0; i--) {\n    var a = __zArray[i];    \n    if (pix > __zZoneStart[i]) { return i; }    \n  }\t  \n}\n\n// prerender pass. \nexport function beforeRender(delta) {\n\tCalcZoneStart();\n}\n\n// per-pixel render function\nexport function render(index) {\n    var a = __zArray[GetZoneNumber(index)];\n\t\n\tif (a[__zone_state]) {\n      hsv(a[__zone_h],a[__zone_s],a[__zone_b]);\n\t}\n\telse {\n\t\t  hsv(0,0,0);\n  }\n}\n\n\n\n"
  },
  "preview": "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"
}